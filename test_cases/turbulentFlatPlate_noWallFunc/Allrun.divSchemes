#!/bin/bash
cd "${0%/*}" || exit                                # Run from this directory
. ${WM_PROJECT_DIR:?}/bin/tools/RunFunctions        # Tutorial run functions
#------------------------------------------------------------------------------

# Define StartTime
StartTime=$(date +%s)

if notTest "$@"
then
    models="
    kOmegaSST
    "

    declare -A grading_vs_yp
    #level 5 gradings
    grading_vs_yp[0.05]=50000
    grading_vs_yp[1]=2200
    grading_vs_yp[2]=950
    grading_vs_yp[5]=300
    grading_vs_yp[10]=130
    grading_vs_yp[30]=30
    grading_vs_yp[50]=15
    grading_vs_yp[100]=5

    # level 3 gradings
    #grading_vs_yp[1]=9300
    #grading_vs_yp[2]=4300
    #grading_vs_yp[5]=1500
    #grading_vs_yp[10]=650
    #grading_vs_yp[30]=175
    #grading_vs_yp[50]=90
    #grading_vs_yp[100]=35

    # Declare res_value array
    declare -A res_value    
    res_value[1e-5]=1e-5    

    # Declare fixed values of omega for each y+
    # omega_wall = 10*6*nu_inf/(beta_1*(delta_y_wall)**2)
    # delta_y_wall is the first cell center of y coordinate in inlet or outlet
    declare -A omega_wall
    omega_wall[0.05]=143845461846.68436 # delta_y_wall = 2.77838e-7
    omega_wall[1]=545500527.1759933 # delta_y_wall = 4.51172e-6
    omega_wall[2]=127730189.02111071 # delta_y_wall = 9.3238e-6
    omega_wall[5]=18268574.887755036 # delta_y_wall = 2.4654e-5
    omega_wall[10]=4659592.690268157 # delta_y_wall = 4.88164e-5
    omega_wall[30]=480666.3376110513 # delta_y_wall = 1.51991e-4
    omega_wall[50]=176457.7977119062 # delta_y_wall = 2.50853e-4
    omega_wall[100]=40709.984301175675 # delta_y_wall = 5.22263e-4

    # Declare fvSchemes array
    declare -A fvSchemes
    fvSchemes[linearUpwind]="linearUpwind grad(U)"
    fvSchemes[upwind]=upwind
    fvSchemes[limitedLinear]="limitedLinear 1"
    fvSchemes[linear]=linear

    # Number of processors for parallel computing (4 processors)
    proc_num=$(seq 0 3)

    \cp constant/turbulenceProperties.orig constant/turbulenceProperties

    # Making a directory for investigation of various divergence schemes for velocity
    mkdir UdivSchemes    

    for model in $models
    do
        echo "Processing model: $model"

        foamDictionary -entry RAS.RASModel -set "$model" \
            constant/turbulenceProperties > /dev/null

        for i in "${!grading_vs_yp[@]}"
        do
            yp=$i
            grading=${grading_vs_yp[$yp]}
            # Fixed value of omega
            omega=${omega_wall[$yp]}

            # Make a directory for file separation
            mkdir UdivSchemes/yplus_${yp}

            echo "Mesh: y+ $yp"

            # Remove 0.orig folder and copy again from 0.model
            \rm -rf 0.orig
            \cp -rf 0.${model} 0.orig

            sed "s/GRADING/$grading/g" system/blockMeshDict.template > system/blockMeshDict
            # Add the fixed omega value for each mesh generation
            sed "s/OMEGAWALL/$omega/g" 0.orig/omega.template > 0.orig/omega
            # Add additional loop for each residual limit value
            for j in "${!res_value[@]}"
            do
                # Add a variable for residual limit value
                res=$j
                echo "Residual control: $res"
                # SIMPLE residual control
                sed "s/RESIDUAL/$res/g" system/fvSolution.template > system/fvSolution                

                for l in "${!fvSchemes[@]}"
                do
                    # Remove all processor folders to decompose the section for every case
                    rm -rf processor*

                    # Add a variable for fvSchemes
                    fvs=$l
                    fvs_name=${fvSchemes[$fvs]}
                    echo "fvScheme: $fvs_name"
                    
                    # Insert the related fvScheme to "fvSchemes" file
                    sed "s/DIVSCHEME/$fvs_name/g" system/fvSchemes.template > system/fvSchemes
                    # Making a directory to save the data separately for each divergence scheme
                    mkdir UdivSchemes/yplus_${yp}/$fvs
                
                    runApplication -s ${model}_${yp}_${res}_${fvs} blockMesh
                    # Decompose mesh for every case
                    runApplication -s ${model}_${yp}_${res}_${fvs} decomposePar
                    # Distribute 0.orig directory to processor folders
                    restore0Dir -processor              
                    # Dummy file for post-processing
                    touch post.foam

                    # Run simpleFoam solver with parallel computing
                    runParallel -s ${model}_${yp}_${res}_${fvs} simpleFoam -parallel
            
                    # Change solverInfo.dat to solverInfo.csv
                    sed 's/#//g' postProcessing/solverInfo/0/solverInfo.dat > postProcessing/solverInfo/0/solverInfo.csv
                    cp postProcessing/solverInfo/0/solverInfo.csv UdivSchemes/yplus_${yp}/$fvs/solverInfo_${model}_${yp}_${res}_${fvs}.csv
                    # Change folder name to preserve each case data
                    mv postProcessing UdivSchemes/yplus_${yp}/$fvs/postProcessing-${model}_${yp}_${res}_${fvs}
                    
                    UInf=$(foamDictionary -entry internalField 0.orig/U | sed 's/^.*(\s*\([^ ]*\).*/\1/g')
                    nuInf=$(foamDictionary -entry nu constant/transportProperties | sed 's/^.*\s\(.*\);/\1/g')

                    echo "UInf = $UInf"

                    # Echo only once to avoid overwrite and delete '#' in front of ccx
                    echo "ccx tau_xx tau_yy tau_zz" > UdivSchemes/yplus_${yp}/$fvs/tauw_${model}_${yp}_${res}_${fvs}.csv
                    echo "ccx y+" > UdivSchemes/yplus_${yp}/$fvs/yplus_${model}_${yp}_${res}_${fvs}.csv
                    echo "ccy" > UdivSchemes/yplus_${yp}/$fvs/Cy_${model}_${yp}_${res}_${fvs}.csv
                    # Use an additional loop for gathering all the results from each processor
                    for k in $proc_num
                    do
                        timeDir=$(foamListTimes -processor -latestTime)

                        foamDictionary -entry boundaryField.bottomWall.value -value processor$k/$timeDir/Cx | \
                            sed -n '/(/,/)/p' | sed -e 's/[()]//g;/^\s*$/d' > Cx.$$
                        foamDictionary -entry boundaryField.bottomWall.value -value processor$k/$timeDir/wallShearStress | \
                            sed -n '/(/,/)/p' | sed -e 's/[()]//g;/^\s*$/d' > tau.$$
                        foamDictionary -entry boundaryField.bottomWall.value -value processor$k/$timeDir/yPlus | \
                            sed -n '/(/,/)/p' | sed -e 's/[()]//g;/^\s*$/d' > yp.$$
                        # Add cell center value of y coordinate in inlet patch
                        foamDictionary -entry boundaryField.inlet.value -value processor$k/$timeDir/Cy | \
                            sed -n '/(/,/)/p' | sed -e 's/[()]//g;/^\s*$/d' > Cy.$$
            
                        # Save to csv file instead of dat file
                        paste -d ' ' Cx.$$ tau.$$ >> UdivSchemes/yplus_${yp}/$fvs/tauw_${model}_${yp}_${res}_${fvs}.csv                
                        paste -d ' ' Cx.$$ yp.$$ >> UdivSchemes/yplus_${yp}/$fvs/yplus_${model}_${yp}_${res}_${fvs}.csv
                        paste -d ' ' Cy.$$ >> UdivSchemes/yplus_${yp}/$fvs/Cy_${model}_${yp}_${res}_${fvs}.csv
                        \rm -f Cx.$$ tau.$$ yp.$$ Cy.$$
                    done
                done
            done
            
        done
        # The name of this folder already changed, and thus it is not needed.
        #mv postProcessing postProcessing-${model}
    done
fi

# Define EndTime and print elapsed time for the task
EndTime=$(date +%s)
echo "Total Elapsed Time : $(($EndTime - $StartTime)) seconds"
# -----------------------------------------------------------------------------
